//
// Created by Trevor on 4/19/2025.
//
#include "VulnerabilityMapper.h"
#include <iostream>
using namespace std;

//takes in cve_id_map and empty cvss_ordered_map passed by reference to update original values
//increments through every key in the cve_id_map and adds it to the multimap, which automatically sorts it upon insertion into a tree
//the data is added and sorted by cvss score (and can have duplicates due to it being a multimap)
void VulnerabilityMapper::multimap_add_and_sort(unordered_map<string, DataTable> &input_map, multimap<float, string, greater<>> &multimap_to_fill)
{
    for (const auto& [key, data] : input_map) {
        multimap_to_fill.insert({data.cvss, key});
    }
}

//increment through each cvss value in the multimap
void VulnerabilityMapper::multimap_print_all_cvss_ordered(unordered_map<string, DataTable> &unordered_map, multimap<float, string, greater<>> &multimap)
{
    cout << "sorted by CVSS score in descending order" << endl;
    for (const auto& [cvss, key] : multimap) {
        const DataTable& table_reference = unordered_map[key];
        std::cout << key << " -> cvss_score: " << table_reference.cvss << endl;
    }
}

//increment through each cvss value in the multimap based off some key_input parameter
void VulnerabilityMapper::multimap_print_by_input(unordered_map<string, DataTable> &unordered_map, multimap<float, string, greater<>> &multimap, string key_var, string key_exact)
{
    int counter = 0;
    for(const auto& [cvss, key] : multimap)
    {
        const DataTable& table_reference = unordered_map[key];
        if (key_var == "published_date") {
            if(table_reference.published_date == key_exact)
            {
                cout << key << " -> " << table_reference.cvss << " -> " << table_reference.published_date << endl;
                counter++;
            }
        } else if (key_var == "vendor") {
            if(table_reference.vendor == key_exact)
            {
                cout << key << " -> " << table_reference.cvss << " -> " << table_reference.vendor << endl;
                counter++;
            }
        } else if (key_var == "product") {
            if(table_reference.product == key_exact)
            {
                cout << key << " -> " << table_reference.cvss << " -> " << table_reference.product << endl;
                counter++;
            }
        } else if (key_var == "os_type") {
            if(table_reference.os_type == key_exact)
            {
                cout << key << " -> " << table_reference.cvss << " -> " << table_reference.os_type << endl;
                counter++;
            }
        } else if (key_var == "severity") {
            if(table_reference.severity == key_exact)
            {
                cout << key << " -> " << table_reference.cvss << " -> " << table_reference.severity << endl;
                counter++;
            }
        } else if (key_var == "cvss") {
            if(table_reference.cvss == stof(key_exact))
            {
                cout << key << " -> " << table_reference.cvss << endl;
                counter++;
            }
        } else {
            cout << "please input valid type" << endl;
        }
    }
    cout << "total search hits: " << counter << endl;
}
