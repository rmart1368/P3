#include "VulnerabilityMapper.h"
#include <iostream>
#include <iomanip>
using namespace std;

void VulnerabilityMapper::unordered_map_SQL_upload()
{
    cve_id_map["4729A"] = {"12/07/2020", "Remote code execution vulnerability", "Microsoft", "Edge", "Windows", "high", 9.1f};
    cve_id_map["1836T"] = {"03/03/2015", "Privilege escalation flaw", "Apple", "Safari", "Mac OS", "medium", 6.4f};
    cve_id_map["9375K"] = {"29/09/2018", "Buffer overflow in image processing", "Adobe", "Photoshop", "Windows", "high", 8.7f};
    cve_id_map["5081J"] = {"22/01/2022", "Authentication bypass via token reuse", "Google", "Chrome", "Linux", "high", 9.5f};
    cve_id_map["6723N"] = {"10/10/2011", "Information disclosure via cache timing", "Intel", "Firmware", "Windows", "low", 3.2f};
    cve_id_map["3517F"] = {"17/04/2019", "Cross-site scripting vulnerability", "Mozilla", "Firefox", "Linux", "medium", 5.8f};
    cve_id_map["9264B"] = {"01/06/2009", "Heap corruption when parsing files", "Oracle", "Java", "Windows", "high", 8.1f};
    cve_id_map["7902L"] = {"05/12/2016", "Insecure deserialization flaw", "Apache", "Struts", "Linux", "high", 9.3f};
    cve_id_map["7912L"] = {"05/12/2016", "Insecure deserialization flaw", "Apache", "Struts", "Linux", "high", 9.3f};
    cve_id_map["7922L"] = {"05/12/2016", "Insecure deserialization flaw", "Apache", "Struts", "Linux", "high", 9.3f};
    cve_id_map["2391V"] = {"28/03/2013", "SQL injection via crafted query", "PostgreSQL", "psql", "Linux", "medium", 6.0f};
    cve_id_map["6648X"] = {"16/08/2005", "Directory traversal vulnerability", "Cisco", "IOS", "Windows", "low", 2.7f};
    cve_id_map["6649X"] = {"16/08/2005", "Directory traversal vulnerability", "Apache", "IOS", "Windows", "high", 2.7f};
    cve_id_map["6249X"] = {"16/08/2005", "Directory traversal vulnerability", "Apache", "TestProd", "Windows", "high", 2.6f};
}

void VulnerabilityMapper::multimap_add_and_sort()
{
    for (const auto& [key, data] : cve_id_map) {
        cvss_ordered_map.insert({data.cvss, key});
    }
}

//increment through each cvss value in the multimap
void VulnerabilityMapper::multimap_print_all_cvss_ordered()
{
    cout << "sorted by CVSS score in descending order" << endl;
    for (const auto& [cvss, key] : cvss_ordered_map) {
        const DataTable& table_reference = cve_id_map[key];
        std::cout << key << " -> cvss_score: " << table_reference.cvss << endl;
    }
}

//increment through each cvss value in the multimap based off some key_input parameter
void VulnerabilityMapper::multimap_print_by_input(string date_search, string vendor_search, string product_search, string os_search, string sev_search)
{
    int counter = 0;
    for(const auto& [cvss, key] : cvss_ordered_map)
    {
        const DataTable& table_reference = cve_id_map[key];
        if ((date_search.empty() || table_reference.published_date == date_search) &&
            (vendor_search.empty() || table_reference.vendor == vendor_search) &&
            (product_search.empty() || table_reference.product == product_search) &&
            (os_search.empty() || table_reference.os_type == os_search) &&
            (sev_search.empty() || table_reference.severity == sev_search))
        {
            counter++;
            cout << key << " | " <<
            table_reference.cvss << " | " << std::left << std::setw(10) <<
            table_reference.vendor << " | " << std::left << std::setw(10) <<
            table_reference.product << " | " << "severity: " << std::setw(6) <<
            table_reference.severity << " | " << std::setw(10) <<
            table_reference.published_date << " | " <<
            table_reference.description << endl;
        }
    }
    cout << "total search hits: " << counter << endl;
}
