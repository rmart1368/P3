#include "VulnerabilityMapper.h"
#include <iostream>
#include <iomanip>
#include <vector>
using namespace std;

void VulnerabilityMapper::unordered_map_SQL_upload(vector<string> &input_data_vector)
{
    cve_id_map[input_data_vector.at(0)] = {input_data_vector.at(1), input_data_vector.at(2), input_data_vector.at(3), input_data_vector.at(4), input_data_vector.at(5), input_data_vector.at(6), stof(input_data_vector.at(7))};
}

void VulnerabilityMapper::multimap_add_and_sort()
{
    for (const auto& [key, data] : cve_id_map) {
        cvss_ordered_map.insert({data.cvss, key});
    }
}

//increment through each cvss value in the multimap
void VulnerabilityMapper::multimap_print_all_cvss_ordered()
{
    cout << "sorted by CVSS score in descending order" << endl;
    for (const auto& [cvss, key] : cvss_ordered_map) {
        const DataTable& table_reference = cve_id_map[key];
        std::cout << key << " -> cvss_score: " << table_reference.cvss << endl;
    }
}

//increment through each cvss value in the multimap based off some key_input parameter
void VulnerabilityMapper::multimap_print_by_input(string date_search, string vendor_search, string product_search, string os_search, string sev_search)
{
    int counter = 0;
    for(const auto& [cvss, key] : cvss_ordered_map)
    {
        const DataTable& table_reference = cve_id_map[key];
        if ((date_search.empty() || table_reference.published_date == date_search) &&
            (vendor_search.empty() || table_reference.vendor == vendor_search) &&
            (product_search.empty() || table_reference.product == product_search) &&
            (os_search.empty() || table_reference.os_type == os_search) &&
            (sev_search.empty() || table_reference.severity == sev_search))
        {
            counter++;
            cout << key << " | " << fixed << setprecision(1) <<
            table_reference.cvss << " | " << "vendor: " << std::left << std::setw(12) <<
            table_reference.vendor << " | " << "product: " << std::left << std::setw(15) <<
            table_reference.product << " | " << "severity: " << std::setw(6) <<
            table_reference.severity << " | " << std::setw(10) <<
            table_reference.published_date << " | " << endl;
//            table_reference.description << endl;
        }
    }
    cout << "total search hits: " << counter << endl;
}
